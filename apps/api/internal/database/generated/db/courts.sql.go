// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: courts.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateCourt = `-- name: CreateCourt :one
WITH new_location AS (
  INSERT INTO location (address_line, country_code, timezone, lat, lon, region, postal_code, place_id)
  VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
  RETURNING id
)
INSERT INTO court (location_id, name, court_count)
VALUES ((SELECT id FROM new_location), $9, $10)
RETURNING id, location_id, name, court_count, created_at, updated_at
`

type CreateCourtParams struct {
	AddressLine string         `json:"address_line"`
	CountryCode string         `json:"country_code"`
	Timezone    string         `json:"timezone"`
	Lat         pgtype.Numeric `json:"lat"`
	Lon         pgtype.Numeric `json:"lon"`
	Region      pgtype.Text    `json:"region"`
	PostalCode  pgtype.Text    `json:"postal_code"`
	PlaceID     pgtype.Text    `json:"place_id"`
	Name        string         `json:"name"`
	CourtCount  int32          `json:"court_count"`
}

func (q *Queries) CreateCourt(ctx context.Context, arg CreateCourtParams) (Court, error) {
	row := q.db.QueryRow(ctx, CreateCourt,
		arg.AddressLine,
		arg.CountryCode,
		arg.Timezone,
		arg.Lat,
		arg.Lon,
		arg.Region,
		arg.PostalCode,
		arg.PlaceID,
		arg.Name,
		arg.CourtCount,
	)
	var i Court
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.Name,
		&i.CourtCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetAllCourts = `-- name: GetAllCourts :many
SELECT id, location_id, name, court_count, created_at, updated_at FROM court
ORDER BY created_at DESC
`

func (q *Queries) GetAllCourts(ctx context.Context) ([]Court, error) {
	rows, err := q.db.Query(ctx, GetAllCourts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Court{}
	for rows.Next() {
		var i Court
		if err := rows.Scan(
			&i.ID,
			&i.LocationID,
			&i.Name,
			&i.CourtCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
